package com.shopper.controller;

import java.util.ArrayList;
import java.util.TreeMap;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.hibernate.Session;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import com.shopper.dao.ShopCRUD;
import com.shopper.dao.ShoppingDataDao;
import com.shopper.dao.UserCommentCRUD;
import com.shopper.entity.ShoppingData;
import com.shopper.semantic.SemanticAnalysis;
import com.shopper.semantic.SemanticResult;

/**
 * This class contains all the URL routes available for shopkeeper for different
 * activities he/she can perform with the system.
 * 
 * @author 1021124
 *
 */
@Controller
public class ShopManagementController
{

	/**
	 * The main view with which shopkeeper will interact
	 * 
	 * @return String having full path to view present in WebContent
	 */
	@RequestMapping(value = "/shopManage", method = { RequestMethod.POST,
			RequestMethod.GET })
	public String shopManage()
	{
		return "shop-manage/shop-id";
	}

	/**
	 * View containing shop id input field. It also adds id to current session
	 * for future use.
	 * 
	 * @param id
	 *            shop's id as present in the database
	 * @param session
	 *            {@link HttpSession} for storing id of the shop
	 * @return String having full path to view present in WebContet
	 */
	@RequestMapping("/shopManage/selectInterface")
	public String shopSelectInterface(@RequestParam("id") String id,
			HttpSession session)
	{
		session.setAttribute("id", id);
		return "/shop-manage/shop-select-interface";
	}

	/**
	 * Transaction view where shop keeper can manage sale and return of various
	 * products
	 * 
	 * @param session
	 *            {@link HttpSession} having main session value as id of the
	 *            shop
	 * @return String having full path to view present in WebContent
	 */
	@RequestMapping("shopManage/transaction")
	public String transaction(ModelMap model, HttpSession session)
	{
		if (session.getAttribute("id") == null)
			return "redirect:/shopManage";
		String shopId = (String) session.getAttribute("id");
		ArrayList<ShoppingData> shopDataList = ShoppingDataDao.read(shopId);
		model.addAttribute("shopDataList", shopDataList);
		return "shop-manage/transaction";
	}

	/**
	 * Handles the form get request generated by submitting of transaction form.
	 * Also notifies whether the transaction was successful or not
	 * 
	 * @param model
	 *            {@link ModelMap} shared with whole application for adding and
	 *            removing attributes
	 * @param req
	 *            {@link HttpServletRequest} object of the current request
	 * @param session
	 *            {@link Session} object of the application
	 * @return String containing path to view of transaction page
	 */
	@RequestMapping("shopManage/performTransaction")
	public String perfromTransaction(ModelMap model, HttpServletRequest req,
			HttpSession session)
	{
		boolean success = false;
		String shopId = (String) session.getAttribute("id");
		int transactionType = Integer.parseInt(req
				.getParameter("transaction_type"));
		String productId = req.getParameter("product_id");
		int quantity = Integer.parseInt(req.getParameter("quantity"));
		success = ShoppingDataDao.update(productId, shopId, quantity,
				transactionType);
		model.addAttribute("typeOfSuccess", (success) ? "success" : "error");
		model.addAttribute("successMessage", (success) ? "Successfully Updated"
				: "Oops some error");
		return "shop-manage/transaction";
	}

	/**
	 * Analysis view where the shop owner can review various analytical aspects
	 * of various products present in his/her shop along with some key market
	 * details of important product.
	 * 
	 * @param model
	 *            {@link ModelMap} of the application for adding various
	 *            attributes
	 * @param session
	 *            {@link HttpSession} of the application
	 * @return String having full path to view present in WebContent.
	 */
	@RequestMapping("shopManage/analysis")
	public String analysis(ModelMap model, HttpSession session)
	{
		if (session.getAttribute("id") == null)
			return "redirect:/shopManage";
		String shopId = (String) session.getAttribute("id");
		ArrayList<ShoppingData> shopDataList = ShoppingDataDao.read(shopId);
		ArrayList<String> distinctProductIds = UserCommentCRUD
				.getDistinctProductIds();
		ArrayList<SemanticResult> semanticResults = SemanticAnalysis
				.getListOfSemanticResults(distinctProductIds);
		TreeMap<String, Integer> productSalePairs = ShoppingDataDao
				.getProductSalePairs(shopId);

		model.addAttribute("shop", ShopCRUD.read(shopId));
		model.addAttribute("overallMaxSoldProduct",
				ShoppingDataDao.getOverallMaxSoldProduct());
		model.addAttribute("overallLeastSoldProduct",
				ShoppingDataDao.getOverallLeastSoldProduct());
		model.addAttribute("shopDataList", shopDataList);
		model.addAttribute("semanticResults", semanticResults);
		model.addAttribute("productSalePairs", productSalePairs);
		return "shop-manage/analysis";
	}
}
